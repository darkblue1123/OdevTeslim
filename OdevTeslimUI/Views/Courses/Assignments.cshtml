@* MVC Projesi - Views/Courses/Assignments.cshtml *@
@{
    ViewData["Title"] = "Kurs Ödevleri";
    Layout = "_AdminLayout";

}

<div class="container mt-4">
    <div id="assignmentsPageCard" class="card" style="display: none;">
        <div class="card-header d-flex justify-content-between align-items-center">
            <h2 id="courseNameForAssignments" class="mb-0"></h2>
            <a href="#" id="btnAddCourseAssignment" class="btn btn-success" style="display: none;" title="Bu Kursa Yeni Ödev Ekle">
                <i class="fa fa-plus"></i> Yeni Ödev Ekle
            </a>

        </div>
        <div class="card-body">
            <h5 class="card-title">Bu Kursa Atanmış Ödevler</h5>

            <div id="assignmentListContainer" class="mt-3" style="display: none;">
                @* Ödevler buraya JavaScript ile eklenecek *@
            </div>

            <p id="noAssignmentsMessage" style="display: none;">Bu kursa atanmış ödev bulunmamaktadır.</p>
            <p id="assignmentsLoadingMessage">Ödev listesi yükleniyor...</p>
        </div>
        <div class="card-footer">
            <a asp-action="Index" asp-controller="Courses" class="btn btn-outline-secondary">Kurs Listesine Geri Dön</a>
            <a id="backToCourseDetails" href="#" class="btn btn-outline-info">Kurs Detaylarına Geri Dön</a>
        </div>
    </div>
    <div id="courseDataLoadingErrorMessage" class="alert alert-danger" style="display: none;">
        Kurs veya ödev bilgileri yüklenirken bir hata oluştu. Lütfen daha sonra tekrar deneyin.
    </div>
    <div id="courseDataNotFoundMessage" class="alert alert-warning" style="display: none;">
        Kurs bilgileri bulunamadı veya bu kursa ait ödevlere erişim yetkiniz yok.
    </div>
</div>
@* ----- ÖDEV TESLİMLERİNİ GÖRÜNTÜLEME MODALI ----- *@
<div class="modal fade" id="viewSubmissionsModal" tabindex="-1" aria-labelledby="viewSubmissionsModalLabel" aria-hidden="true">
    <div class="modal-dialog modal-lg modal-dialog-scrollable">
        <div class="modal-content">
            <div class="modal-header">
                <h5 class="modal-title" id="viewSubmissionsModalLabel">Ödev Teslimleri</h5>
                <button type="button" class="btn-close" data-bs-dismiss="modal" aria-label="Kapat"></button>
            </div>
            <div class="modal-body">
                <h6 id="modalAssignmentTitle"></h6>
                <div id="modalSubmissionList" class="mt-2">
                    @* Teslimler buraya JavaScript ile dinamik olarak eklenecek *@
                </div>
                <div id="modalSubmissionsLoading" class="text-center" style="display:none;">
                    <div class="spinner-border text-primary" role="status">
                        <span class="visually-hidden">Yükleniyor...</span>
                    </div>
                    <p>Teslimler yükleniyor...</p>
                </div>
                <div id="modalNoSubmissions" class="alert alert-info" style="display:none;">Bu ödev için henüz teslim yapılmamış.</div>
                <div id="modalErrorSubmissions" class="alert alert-danger" style="display:none;">Teslimler yüklenirken bir hata oluştu.</div>
            </div>
            <div class="modal-footer">
                <button type="button" class="btn btn-secondary" data-bs-dismiss="modal">Kapat</button>
            </div>
        </div>
    </div>
</div>
@* ----- MODAL SONU ----- *@
@section Scripts {
    <script>
        // Bu fonksiyon JWT token'dan kullanıcı ID'sini parse etmeye çalışır.
        function GetCurrentUserIdFromToken() {
            var token = localStorage.getItem("token");
            if (!token) return null;
            try {
                var payload = JSON.parse(atob(token.split('.')[1]));
                return payload.nameid || payload.sub || payload.unique_name; // Token'ınızdaki ID claim'i
            } catch (e) {
                console.error("Token parse error for User ID:", e);
                return null;
            }
        }

        // Bu fonksiyon JWT token'dan kullanıcı rollerini parse eder.
        function GetCurrentUserRolesFromToken() {
            var token = localStorage.getItem("token");
            if (!token) return [];
            try {
                var payload = JSON.parse(atob(token.split('.')[1]));
                var rolesClaim = payload.role || payload.roles || payload['http://schemas.microsoft.com/ws/2008/06/identity/claims/role'];
                if (rolesClaim) {
                    return Array.isArray(rolesClaim) ? rolesClaim : [rolesClaim.toString()];
                }
                return [];
            } catch (e) {
                console.error("Token parse error for User Roles:", e);
                return [];
            }
        }

        var globalCourseInfoForAssignmentsPage = null;

          $(document).ready(function () {
        var courseId = @ViewBag.CourseId;
        var apiBaseUrl = "@Html.Raw(ViewBag.ApiBaseUrl)";
        var token = localStorage.getItem("token");
        var userRoles = GetCurrentUserRolesFromToken(); // Rolleri en başta al


            // Kurs Detaylarına Geri Dön linkini ayarla
            $("#backToCourseDetails").attr("href", `/Courses/Details/${courseId}`);

            // ViewBag'den rol alma kısmı yok, roller token'dan alınacak.
            var userRoles = GetCurrentUserRolesFromToken();
            console.log("Token'dan alınan roller (Assignments.cshtml):", userRoles);

            if (!courseId || !apiBaseUrl) {
                console.error("Kurs ID veya API adresi ViewBag'den alınamadı.");
                $("#courseDataLoadingErrorMessage").text("Sayfa yüklenirken bir sorun oluştu (ID/API URL eksik).").show();
                $("#assignmentsLoadingMessage").hide();
                return;
            }

            // Token kontrolü
            if (!token) {
                console.warn("Token bulunamadı. API isteği yetkilendirme hatası alabilir.");
                // İsterseniz burada login sayfasına yönlendirme yapabilirsiniz:
                // location.href = "/Login"; // MVC Login sayfanızın adresi
                // return;
            }

                $.ajax({
                url: `${apiBaseUrl}/courses/${courseId}/assignments-with-details`,
                type: "GET",
                headers: { "Authorization": "Bearer " + token },
                success: function (response) {
                    $("#assignmentsLoadingMessage").hide();
                    if (response && response.success) {
                        globalCourseInfoForAssignmentsPage = response.courseInfo; // Global değişkene ata
                        var assignments = response.assignments;

                        $("#courseNameForAssignments").text(`Kurs: ${globalCourseInfoForAssignmentsPage.name || "N/A"} - Ödevler`);

                        // ----- "YENİ ÖDEV EKLE" BUTONU GÖRÜNÜRLÜĞÜ -----
                        var currentUserId = GetCurrentUserIdFromToken();
                        if (globalCourseInfoForAssignmentsPage && globalCourseInfoForAssignmentsPage.teacherId !== undefined) {
                            if (userRoles.includes("Admin") || (userRoles.includes("Teacher") && globalCourseInfoForAssignmentsPage.teacherId.toString() === currentUserId)) {
                                var addAssignmentUrl = `/Assignments/Create?courseId=${courseId}`;
                                $("#btnAddCourseAssignment").attr("href", addAssignmentUrl).show();
                            } else {
                                $("#btnAddCourseAssignment").hide();
                            }
                        } else {
                            $("#btnAddCourseAssignment").hide();
                            console.warn("courseInfo.teacherId API'den gelmedi, 'Yeni Ödev Ekle' butonu yetki kontrolü yapılamadı.");
                        }
                        // ----- BUTON GÖRÜNÜRLÜĞÜ SONU -----

                        var $assignmentListContainer = $("#assignmentListContainer");
                        $assignmentListContainer.empty();

                        if (assignments && assignments.length > 0) {
                            var assignmentHtmlOutput = ''; // HTML'i biriktirip tek seferde append etmek daha performanslı olabilir
                            $.each(assignments, function (index, assignment) {
                                var dueDateText = assignment.dueDate ? new Date(assignment.dueDate).toLocaleString('tr-TR', { dateStyle: 'long', timeStyle: 'short' }) : 'Belirtilmemiş';
                                var createdDateText = assignment.createdDate ? new Date(assignment.createdDate).toLocaleDateString('tr-TR') : 'N/A';

                                var viewSubmissionsButtonHtml = "";
                                // "Cevapları Gör" butonu sadece Admin veya kursun öğretmeni ise gösterilecek
                                if (globalCourseInfoForAssignmentsPage && globalCourseInfoForAssignmentsPage.teacherId !== undefined) {
                                    if (userRoles.includes("Admin") || (userRoles.includes("Teacher") && globalCourseInfoForAssignmentsPage.teacherId.toString() === currentUserId)) {
                                        viewSubmissionsButtonHtml = `<button class="btn btn-sm btn-outline-primary mt-2 btnViewSubmissions" data-assignmentid="${assignment.id}" data-assignmenttitle="${assignment.title || 'Başlıksız Ödev'}">Teslimleri Gör</button>`;
                                    }
                                }

                                assignmentHtmlOutput += `
                                    <div class="card mb-3 assignment-item-onpage">
                                        <div class="card-body">
                                            <h5 class="card-title">${assignment.title || "Başlıksız Ödev"} (ID: ${assignment.id})</h5>
                                            <p class="card-text">${assignment.description || "Açıklama yok."}</p>
                                            <p><small class="text-muted">Oluşturulma: ${createdDateText} | Son Teslim: <strong>${dueDateText}</strong></small></p>
                                            <div>
                                                ${viewSubmissionsButtonHtml}
        @* Öğrenci bu sayfadan ödev teslim etmeyeceği için teslim formu burada yok. *@
        @* Öğrencinin kendi kurs ödevleri sayfasında (CourseAssignmentsPage.cshtml) teslim formu vardı. *@
        @* Burası Admin/Öğretmen için ödevleri ve teslimleri yönetme sayfası gibi. *@
                                            </div>
                                        </div>
                                    </div>`;
                            });
                            $assignmentListContainer.html(assignmentHtmlOutput).show(); // Tek seferde HTML'i ekle
                            $("#noAssignmentsMessage").hide();
                        } else {
                            $("#noAssignmentsMessage").show();
                            $assignmentListContainer.hide();
                        }
                        $("#assignmentsPageCard").show();
                    } else {
                        $("#courseDataNotFoundMessage").text(response.message || "Kurs veya ödev verisi alınamadı.").show();
                    }
                },
                error: function (jqXHR, textStatus, errorThrown) { /* ... (mevcut hata yönetimi) ... */ }
            });


            // ----- "TESLİMLERİ GÖR" BUTONUNA TIKLANINCA MODALI DOLDUR VE AÇ -----
            $(document).on("click", ".btnViewSubmissions", function() {
                var assignmentId = $(this).data("assignmentid");
                var assignmentTitle = $(this).data("assignmenttitle");

                if (!assignmentId) return;

                $("#modalAssignmentTitle").text(`"${assignmentTitle}" için Teslimler`);
                $("#modalSubmissionList").empty();
                $("#modalNoSubmissions").hide();
                $("#modalErrorSubmissions").hide();
                $("#modalSubmissionsLoading").show();

                var submissionsModal = new bootstrap.Modal(document.getElementById('viewSubmissionsModal'));
                submissionsModal.show();

                // API'den bu ödeve ait teslimleri çek
                $.ajax({
                    url: `${apiBaseUrl}/assignments/${assignmentId}/submissions`, // API AssignmentSubmissionsController GetAssignmentSubmissions
                    type: "GET",
                    headers: { "Authorization": "Bearer " + token },
                    success: function(submissions) {
                        $("#modalSubmissionsLoading").hide();
                        if (submissions && Array.isArray(submissions) && submissions.length > 0) {
                            var submissionsHtml = '<ul class="list-group">';
                            $.each(submissions, function(idx, sub) {
                                var studentName = `${sub.studentFirstName || ''} ${sub.studentLastName || ''}`.trim() || 'Bilinmeyen Öğrenci';
                                var submissionDateText = sub.submissionDate ? new Date(sub.submissionDate).toLocaleString('tr-TR') : 'N/A';
                                var gradeText = sub.grade !== null ? sub.grade.toString() : 'Not Verilmemiş';
                                var feedbackText = sub.feedback || 'Geri bildirim yok.';
                                var gradedDateText = sub.gradedDate ? new Date(sub.gradedDate).toLocaleString('tr-TR') : '';

                                submissionsHtml += `
                                    <li class="list-group-item">
                                        <p><strong>Öğrenci:</strong> ${studentName} (ID: ${sub.studentId})</p>
                                        <p><strong>Teslim Tarihi:</strong> ${submissionDateText}</p>
                                        <p><strong>Cevap/İçerik:</strong></p>
                                        <pre style="white-space: pre-wrap; word-wrap: break-word; background-color: #f8f9fa; padding: 10px; border-radius: 4px;">${sub.content || "İçerik yok."}</pre>
                                        <hr>
                                        <p><strong>Not:</strong> ${gradeText}</p>
                                        <p><strong>Geri Bildirim:</strong> ${feedbackText}</p>
                                        ${gradedDateText ? `<p><small class="text-muted">Notlandırma Tarihi: ${gradedDateText}</small></p>` : ''}
        @* Buraya not verme/feedback düzenleme formu da eklenebilir (Admin/Öğretmen için) *@
                                    </li>`;
                            });
                            submissionsHtml += '</ul>';
                            $("#modalSubmissionList").html(submissionsHtml);
                        } else {
                            $("#modalNoSubmissions").show();
                        }
                    },
                    error: function(jqXHR) {
                        $("#modalSubmissionsLoading").hide();
                        var errorMsg = "Teslimler yüklenirken bir API hatası oluştu.";
                         if (jqXHR.status === 403) { errorMsg = "Bu ödevin teslimlerini görme yetkiniz yok.";}
                         else if (jqXHR.status === 404) { errorMsg = "Ödev veya teslim bilgileri bulunamadı.";}
                        $("#modalErrorSubmissions").text(errorMsg).show();
                    }
                });
            });
        }); // document.ready sonu
    </script>
}