@* Views/Courses/Index.cshtml *@
@{
    ViewData["Title"] = "Dersler";
    Layout = "_AdminLayout";
}

<div class="row">
    <div class="col-md-12">
        @* id="divCourseList" buradan kaldırılabilir, direkt card'a odaklanabiliriz *@

        @* ----- YENİ KURS EKLE BUTONU ----- *@
        <div class="mb-3">
            <a href="@Url.Action("Create", "Courses")" id="btnAddNewCourse" class="btn btn-success" style="display: none;">
                <i class="fa fa-plus"></i> Yeni Kurs Ekle
            </a>
        </div>
        @* ----- BUTON SONU ----- *@

        <div class="card">
            <div class="card-header">
                <h3>Kurs Listesi</h3>
            </div>
            <div class="card-body">
                <div class="table-responsive">
                    <table class="table table-striped table-hover" id="tbCourseList">
                        <thead>
                            <tr>
                                <th>Kurs Adı</th>
                                <th>Açıklama</th>
                                <th>Öğretmen</th>
                                <th>İşlemler</th>
                            </tr>
                        </thead>
                        <tbody>
                            @* AJAX ile doldurulacak *@
                        </tbody>
                    </table>
                </div>
            </div>
            <div class="card-footer">
                @* Footer boş bırakılabilir veya başka bilgiler eklenebilir *@
            </div>
        </div>
    </div>
</div>

@section Scripts {
    <script>
        // Bu fonksiyon JWT token'dan kullanıcı ID'sini parse etmeye çalışır.
        // (Mevcut kodunuzda sonda tanımlıydı, okunurluk için başa aldım)
        function GetCurrentUserIdFromToken() {
            var token = localStorage.getItem("token"); // token değişkenini globalden veya buradan almalı
            if (!token) return null;
            try {
                var payload = JSON.parse(atob(token.split('.')[1]));
                return payload.nameid || payload.sub || payload.unique_name; // Token'ınızdaki ID claim'i
            } catch (e) {
                console.error("Index - Token parse error for User ID:", e);
                return null;
            }
        }

        // Bu fonksiyon JWT token'dan kullanıcı rollerini parse eder.
        function GetCurrentUserRolesFromToken() {
            var token = localStorage.getItem("token"); // token değişkenini globalden veya buradan almalı
            if (!token) return [];
            try {
                var payload = JSON.parse(atob(token.split('.')[1]));
                var rolesClaim = payload.role || payload.roles || payload['http://schemas.microsoft.com/ws/2008/06/identity/claims/role'];
                if (rolesClaim) {
                    return Array.isArray(rolesClaim) ? rolesClaim : [rolesClaim.toString()];
                }
                return [];
            } catch (e) {
                console.error("Index - Token parse error for User Roles:", e);
                return [];
            }
        }

        $(document).ready(function () {
            var apiBaseUrl = "@Html.Raw(ViewBag.ApiBaseUrl)"; // Bu ViewBag MVC Controller'dan set edilmeli
            var token = localStorage.getItem("token");

            // ViewBag.UserRolesJson kullanımı kaldırıldı, roller token'dan alınıyor:
            var userRoles = GetCurrentUserRolesFromToken();
            console.log("Token'dan alınan roller (Index.cshtml):", userRoles);

            // ----- YENİ KURS EKLE BUTONU GÖRÜNÜRLÜK KONTROLÜ -----
            if (userRoles.includes("Admin") || userRoles.includes("Teacher")) {
                $("#btnAddNewCourse").show();
                console.log("Yeni Kurs Ekle butonu gösteriliyor.");
            } else {
                $("#btnAddNewCourse").hide();
                console.log("Yeni Kurs Ekle butonu gizlendi. Yetki yok.");
            }
            // ----- KONTROL SONU -----

            if (!token) {
                console.warn("Index.cshtml - Token bulunamadı. API istekleri yetkilendirme hatası alabilir.");
                // Login sayfasına yönlendirme, kullanıcı deneyimine göre burada veya
                // API'den 401/403 hatası alındığında yapılabilir.
                // location.href = "/Login";
                // return; // Eğer token yoksa GetCourseList çağrılmasın
            }

            GetCourseList();

            function GetCourseList() {
                if (!token && !userRoles.length) { // Token yoksa ve roller de alınamadıysa (ilk yükleme anı için)
                     // Eğer token zorunluysa ve yoksa, boş bir yetki hatası mesajı gösterilebilir
                     // veya login'e yönlendirme zaten yapıldıysa bu kısma gerek kalmaz.
                     console.log("Token veya roller olmadan GetCourseList çağrılmıyor (isteğe bağlı kontrol).");
                     // $("#tbCourseList tbody").html('<tr><td colspan="4" class="text-danger">Lütfen önce giriş yapınız.</td></tr>');
                     // return;
                }

                $.ajax({
                    url: `${apiBaseUrl}/courses`, // API'deki tüm dersleri listeleme endpoint'i
                    type: "GET",
                    headers: {
                        "Authorization": "Bearer " + token
                    },
                    success: function (coursesData) {
                        // API'nizin /api/courses endpoint'inin doğrudan bir DTO dizisi döndürdüğünü varsayıyoruz.
                        // Eğer { success: true, data: [...] } gibi bir yapı dönüyorsa,
                        // coursesData = coursesData.data; gibi bir atama yapmanız gerekebilir.
                        // Mevcut API CoursesController'ınızdaki GetCourses metodu direkt liste dönüyor gibiydi.
                        console.log("Alınan Kurslar (Index):", coursesData);
                        CoursesToTable(coursesData, userRoles); // userRoles'i CoursesToTable'a parametre olarak geç
                    },
                    error: function (jqXHR, textStatus, errorThrown) {
                        console.error("Ders listesi alınırken hata oluştu (Index):", textStatus, errorThrown, jqXHR.responseText);
                        if (jqXHR.status === 401 || jqXHR.status === 403) {
                            $("#tbCourseList tbody").html('<tr><td colspan="4" class="text-danger">Dersleri listeleme yetkiniz bulunmamaktadır veya oturumunuz sonlanmıştır. Lütfen tekrar giriş yapın.</td></tr>');
                        } else {
                            $("#tbCourseList tbody").html('<tr><td colspan="4" class="text-danger">Ders listesi yüklenirken bir sorun oluştu.</td></tr>');
                        }
                    }
                });
            }

            // userRoles parametresini ekledik, çünkü artık ViewBag'den değil, token'dan alınıyor.
            function CoursesToTable(coursesData, currentRoles) {
                $("#tbCourseList tbody").empty();
                var rows = "";

                if (!coursesData || !Array.isArray(coursesData) || coursesData.length === 0) {
                    rows = '<tr><td colspan="4" class="text-center">Gösterilecek ders bulunamadı.</td></tr>';
                } else {
                    $.each(coursesData, function (index, course) {
                        rows += "<tr>";
                        rows += `<td>${course.name || 'N/A'}</td>`;
                        rows += `<td>${course.description || ''}</td>`;
                        rows += `<td>${course.teacherName || 'Belirtilmemiş'}</td>`;

                        rows += '<td>';
                        // Ödevleri Gör Linki
                        rows += `<a class="btn btn-sm btn-info mr-1" href="/Courses/Assignments/${course.id}" title="Kursa Ait Ödevleri Gör"><i class="fa fa-clipboard-list"></i></a>`;
                        // Öğrencileri Gör Linki
                        rows += `<a class="btn btn-sm btn-primary mr-1" href="/Courses/Details/${course.id}" title="Kayıtlı Öğrencileri Gör"><i class="fa fa-users"></i></a>`;

                        // Admin ve Öğretmen için Düzenleme/Silme Butonları
                        // GetCurrentUserIdFromToken() fonksiyonu artık global olduğu için direkt çağrılabilir.
                        var currentUserIdForCourseRow = GetCurrentUserIdFromToken();
                        if (currentRoles.includes("Admin") || (currentRoles.includes("Teacher") && course.teacherId && course.teacherId.toString() === currentUserIdForCourseRow)) {
                            rows += `<button class="btn btn-sm btn-warning mr-1 btnEditCourse" data-id="${course.id}" title="Dersi Düzenle"><i class="fa fa-edit"></i></button>`;
                            rows += `<button class="btn btn-sm btn-danger btnDeleteCourse" data-id="${course.id}" title="Dersi Sil"><i class="fa fa-trash"></i></button>`;
                        }
                        rows += '</td>';
                        rows += "</tr>";
                    });
                }
                $("#tbCourseList tbody").append(rows);
            }
        });
    </script>
}