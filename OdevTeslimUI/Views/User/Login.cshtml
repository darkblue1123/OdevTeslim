@{
    Layout = null;
}

<!DOCTYPE html>
<html lang="en">

<head>

    <meta charset="utf-8">
    <meta http-equiv="X-UA-Compatible" content="IE=edge">
    <meta name="viewport" content="width=device-width, initial-scale=1, shrink-to-fit=no">
    <meta name="description" content="">
    <meta name="author" content="">

    <title>SB Admin 2 - Login</title>

    <!-- Custom fonts for this template-->
    <link href="~/sbadmin/vendor/fontawesome-free/css/all.min.css" rel="stylesheet" type="text/css">
    <link href="https://fonts.googleapis.com/css?family=Nunito:200,200i,300,300i,400,400i,600,600i,700,700i,800,800i,900,900i"
          rel="stylesheet">

    <!-- Custom styles for this template-->
    <link href="~/sbadmin/css/sb-admin-2.min.css" rel="stylesheet">

</head>

<body class="bg-gradient-primary">

    <div class="container">

        <!-- Outer Row -->
        <div class="row justify-content-center">

            <div class="col-xl-6 col-lg-6 col-md-9">

                <div class="card o-hidden border-0 shadow-lg my-5">
                    <div class="card-body p-0">
                        <!-- Nested Row within Card Body -->
                        <div class="row">

                            <div class="col-lg-12">
                                <div class="p-5">
                                    <div class="text-center">
                                        <h1 class="h4 text-gray-900 mb-4">Üye Giriş Ekranı</h1>
                                    </div>

                                    <div class="form-group">
                                        <input type="email" class="form-control form-control-user"
                                               id="txtUserName" aria-describedby="emailHelp"
                                               placeholder="Kullanıcı Adı">
                                    </div>
                                    <div class="form-group">
                                        <input type="password" class="form-control form-control-user"
                                               id="txtPassword" placeholder="Parola">
                                    </div>
                                    <div class="form-group">
                                        <div class="custom-control custom-checkbox small">
                                        </div>
                                    </div>
                                    <button class="btn btn-primary btn-user btn-block" id="btnLogin">
                                        Giriş
                                    </button>


                                    <hr>
                                    <div id="divResult"></div>

                                    <div class="text-center">
                                        @*    <a class="small" href="forgot-password.html">Forgot Password?</a>
                                    </div>
                                    <div class="text-center">
                                        <a class="small" href="register.html">Create an Account!</a> *@
                                        <div class="text-center">
                                            <a class="small" asp-controller="User" asp-action="Register">Hesap Oluştur!</a>
                                        </div>
                                    </div>
                                </div>
                            </div>
                        </div>
                    </div>
                </div>

            </div>

        </div>

    </div>

    <!-- Bootstrap core JavaScript-->
    <script src="~/sbadmin/vendor/jquery/jquery.min.js"></script>
    <script src="~/sbadmin/vendor/bootstrap/js/bootstrap.bundle.min.js"></script>
    <script src="~/sbadmin/vendor/jquery-easing/jquery.easing.min.js"></script>
    <script src="~/sbadmin/js/sb-admin-2.min.js"></script>

    <script>
        // Yardımcı Fonksiyon: Verilen JWT token string'inden rolleri parse eder
        function ParseRolesFromTokenString(tokenString) {
            if (!tokenString) {
                console.error("ParseRolesFromTokenString: Token string boş.");
                return [];
            }
            try {
                // Token genellikle 3 bölümden oluşur: header.payload.signature
                var tokenParts = tokenString.split('.');
                if (tokenParts.length !== 3) {
                    console.error("ParseRolesFromTokenString: Token formatı geçersiz.");
                    return [];
                }
                var payloadRaw = atob(tokenParts[1]); // Base64 decode payload
                var payload = JSON.parse(payloadRaw);
                console.log("ParseRolesFromTokenString - Parsed Payload:", payload);

                // Token'ınızdaki rol claim adını kontrol edin (genellikle 'role', 'roles' veya tam şema URL'i)
                var rolesClaim = payload.role || payload.roles || payload['http://schemas.microsoft.com/ws/2008/06/identity/claims/role'];

                if (rolesClaim) {
                    var rolesArray = Array.isArray(rolesClaim) ? rolesClaim : [rolesClaim.toString()];
                    console.log("ParseRolesFromTokenString - Dönen Roller:", rolesArray);
                    return rolesArray;
                }
                console.warn("ParseRolesFromTokenString: Rol claim'i token'da bulunamadı.");
                return [];
            } catch (e) {
                console.error("ParseRolesFromTokenString - Token parse error:", e);
                return [];
            }
        }

        $(document).ready(function(){
            var apiBaseUrl = "@Html.Raw(ViewBag.ApiBaseUrl)"; // Bu ViewBag MVC Controller'dan (AccountController Login GET action) set edilmeli
            console.log("Login Sayfası - API Base URL:", apiBaseUrl);

            $("#btnLogin").click(function(event){ // Buton ID'nizin "btnLogin" olduğunu varsayıyorum
                event.preventDefault(); // Form içinde değilse bile, AJAX için iyi bir alışkanlık
                $("#divResult").hide().removeClass("alert-danger alert-success alert-warning").text("");

                var userNameInput = $("#txtUserName").val(); // Input ID'lerinizin "txtUserName" ve "txtPassword" olduğunu varsayıyorum
                var passwordInput = $("#txtPassword").val();

                if(!userNameInput || !passwordInput){
                    $("#divResult")
                        .addClass("alert alert-danger mt-3") // Bootstrap alert class'larını ekleyin
                        .text("Kullanıcı Adı ve Parola Giriniz!")
                        .fadeIn().delay(3000).fadeOut();
                    return false;
                }

                var loginData = {
                    UserName: userNameInput,
                    Password: passwordInput
                };

                var $thisButton = $(this);
                $thisButton.prop("disabled", true).html('<span class="spinner-border spinner-border-sm" role="status" aria-hidden="true"></span> Giriş Yapılıyor...');


                $.ajax({
                    url: `${apiBaseUrl}/User/SignIn`, // API endpoint'iniz
                    type: "POST",
                    data: JSON.stringify(loginData),
                    contentType: "application/json",
                    success: function (response) {
                        $thisButton.prop("disabled", false).text("Giriş");
                        console.log("Login API Başarı Yanıtı:", response);

                        if (response && response.status === true && response.message) {
                            var token = response.message; // Token burada
                            localStorage.setItem("token", token);
                            console.log("Token localStorage'a kaydedildi.");

                            // ----- ROLLERİ TOKEN'DAN OKU VE YÖNLENDİR -----
                            var userRoles = ParseRolesFromTokenString(token);
                            console.log("Giriş sonrası roller:", userRoles);

                            if (userRoles.includes("Admin") || userRoles.includes("Teacher")) {
                                console.log("Admin veya Öğretmen olarak /Courses/Index adresine yönlendiriliyor...");
                                window.location.href = "/Courses/Index";
                            } else if (userRoles.includes("Uye")) { // Öğrenci rolünüz "Uye" idi
                                console.log("Uye (Öğrenci) olarak /Student/Index adresine yönlendiriliyor...");
                                window.location.href = "/Student/Index"; // İstediğiniz öğrenci sayfası
                                // VEYA ÖĞRENCİNİN KURS SAYFASI:
                                // window.location.href = "/Courses/MyCourses";
                            } else {
                                console.warn("Tanımlı bir role uyan yönlendirme bulunamadı. Varsayılan olarak /Home/Index adresine yönlendiriliyor.");
                                window.location.href = "/Home/Index"; // Varsayılan bir sayfa
                            }
                            // ----- YÖNLENDİRME SONU -----

                        } else {
                            var errorMessage = (response && response.message) ? response.message : "Giriş başarısız oldu. Lütfen bilgilerinizi kontrol edin.";
                            console.error("Login Başarısız (API status false veya mesaj yok):", errorMessage);
                            $("#divResult")
                                .addClass("alert alert-danger mt-3")
                                .html(errorMessage) // API'den <p> etiketleri gelebileceği için .html()
                                .fadeIn(); // Hata mesajı kalıcı olsun, fadeOut(3000) kaldırıldı.
                        }
                    },
                    error: function (jqXHR, textStatus, errorThrown) {
                        $thisButton.prop("disabled", false).text("Giriş");
                        console.error("Login API Hata Yanıtı:", jqXHR.status, jqXHR.responseText, textStatus, errorThrown);
                        var errorMessage = "Giriş sırasında bir sunucu hatası oluştu.";
                         if (jqXHR.responseJSON && jqXHR.responseJSON.message) {
                            errorMessage = jqXHR.responseJSON.message;
                        } else if (jqXHR.responseText) {
                            try { var rt = JSON.parse(jqXHR.responseText); if(rt.message || rt.Message) errorMessage = rt.message || rt.Message; } catch(e){}
                        }
                        $("#divResult").addClass("alert alert-danger mt-3").html(errorMessage).fadeIn();
                    }
                });
            });
        });
    </script>
</body>

</html>