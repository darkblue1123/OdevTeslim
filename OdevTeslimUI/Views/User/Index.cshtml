@* MVC Projesi - Views/Users/Index.cshtml *@
@{
    ViewData["Title"] = "Kullanıcı Listesi";
    Layout = "_AdminLayout";

}

<div class="container mt-4">
    <div class="card">
        <div class="card-header d-flex justify-content-between align-items-center">
            <h3 class="mb-0">Kullanıcı Listesi</h3>
            @* İleride "Yeni Kullanıcı Ekle" butonu buraya eklenebilir ve rol bazlı gösterilebilir *@
            @* <a href="@Url.Action("Create", "Users")" id="btnAddNewUser" class="btn btn-success" style="display: none;">
                <i class="fa fa-user-plus"></i> Yeni Kullanıcı Ekle
            </a> *@
        </div>
        <div class="card-body">
            <div class="table-responsive">
                <table class="table table-striped table-hover" id="tbUserList">
                    <thead class="thead-light">
                        <tr>
                            <th>ID</th>
                            <th>Kullanıcı Adı</th>
                            <th>Email</th>
                            <th>Adı Soyadı</th> @* UserDto'nuzda FirstName, LastName veya FullName olduğunu varsayıyorum *@
                            @* <th>Roller</th> *@ @* Roller gösterilecekse başlık eklenebilir *@
                            <th>İşlemler</th> @* Düzenle, Sil, Rol Ata gibi işlemler için *@
                        </tr>
                    </thead>
                    <tbody>
                        @* AJAX ile doldurulacak *@
                    </tbody>
                </table>
            </div>
            <p id="usersLoadingMessage" class="mt-2">Kullanıcı listesi yükleniyor...</p>
            <div id="usersErrorMessage" class="alert alert-danger mt-2" style="display: none;"></div>
        </div>
    </div>
@* ----- KULLANICI DÜZENLEME MODALI ----- *@
<div class="modal fade" id="editUserModal" tabindex="-1" aria-labelledby="editUserModalLabel" aria-hidden="true">
    <div class="modal-dialog">
        <div class="modal-content">
            <div class="modal-header">
                <h5 class="modal-title" id="editUserModalLabel">Kullanıcıyı Düzenle</h5>
                <button type="button" class="btn-close" data-bs-dismiss="modal" aria-label="Close"></button>
            </div>
            <div class="modal-body">
                <form id="editUserForm">
                    <input type="hidden" id="editUserId" /> @* Düzenlenecek kullanıcının ID'si *@

                    <div class="mb-3">
                        <label for="editUserName" class="form-label">Kullanıcı Adı</label>
                        <input type="text" class="form-control" id="editUserName" required>
                    </div>
                    <div class="mb-3">
                        <label for="editEmail" class="form-label">Email</label>
                        <input type="email" class="form-control" id="editEmail" required>
                    </div>
                    <div class="mb-3">
                        <label for="editFirstName" class="form-label">Ad</label>
                        <input type="text" class="form-control" id="editFirstName">
                    </div>
                    <div class="mb-3">
                        <label for="editLastName" class="form-label">Soyad</label>
                        <input type="text" class="form-control" id="editLastName">
                    </div>
                    <div class="mb-3">
                        <label for="editPhoneNumber" class="form-label">Telefon Numarası</label>
                        <input type="tel" class="form-control" id="editPhoneNumber">
                    </div>
                    @* Rol düzenleme eklenecekse, buraya bir bölüm gelebilir *@
                </form>
                <div id="editUserAlert" class="alert mt-2" style="display: none;"></div>
            </div>
            <div class="modal-footer">
                <button type="button" class="btn btn-secondary" data-bs-dismiss="modal">Kapat</button>
                <button type="button" class="btn btn-primary" id="btnSaveChangesUser">Değişiklikleri Kaydet</button>
            </div>
        </div>
    </div>
</div>
@* ----- MODAL SONU ----- *@
</div>

@section Scripts {
    <script>
        // ===== YARDIMCI FONKSİYONLAR: TOKEN İŞLEMLERİ =====
        // Bu fonksiyonlar sayfa içindeki diğer JavaScript kodları tarafından kullanılacak.
        // $(document).ready() bloğundan önce tanımlanmaları iyi bir pratiktir.

        function GetCurrentUserIdFromToken() {
            var token = localStorage.getItem("token");
            if (!token) {
                // console.warn("GetCurrentUserIdFromToken: Token bulunamadı.");
                return null;
            }
            try {
                var payload = JSON.parse(atob(token.split('.')[1]));
                // Token'ınızdaki ID claim adını kontrol edin (nameid, sub, unique_name vb.)
                return payload.nameid || payload.sub || payload.unique_name;
            } catch (e) {
                console.error("GetCurrentUserIdFromToken - Token parse error:", e);
                return null;
            }
        }

        function GetCurrentUserRolesFromToken() {
            var token = localStorage.getItem("token");
            if (!token) {
                // console.warn("GetCurrentUserRolesFromToken: Token bulunamadı.");
                return []; // Rol yoksa boş dizi
            }
            try {
                var payload = JSON.parse(atob(token.split('.')[1]));
                // Token'ınızdaki rol claim adını kontrol edin (role, roles, veya tam şema URL'i)
                var rolesClaim = payload.role || payload.roles || payload['http://schemas.microsoft.com/ws/2008/06/identity/claims/role'];

                if (rolesClaim) {
                    return Array.isArray(rolesClaim) ? rolesClaim : [rolesClaim.toString()];
                }
                return []; // Rol claim'i yoksa boş dizi
            } catch (e) {
                console.error("GetCurrentUserRolesFromToken - Token parse error:", e);
                return [];
            }
        }

        // ===== SAYFA YÜKLENDİĞİNDE ÇALIŞACAK KODLAR =====
        $(document).ready(function () {
            var apiBaseUrl = "@Html.Raw(ViewBag.ApiBaseUrl)";
            var token = localStorage.getItem("token");

            // Kullanıcı rollerini token'dan al (FONKSİYONLAR YUKARIDA TANIMLI OLMALI)
            var currentUserRoles = GetCurrentUserRolesFromToken();
            console.log("Mevcut Kullanıcı Rolleri (Users/Index):", currentUserRoles);

            // Admin ise "Yeni Kullanıcı Ekle" butonu (eğer HTML'de varsa ve ID'si btnAddNewUser ise)
            // if (currentUserRoles.includes("Admin")) {
            //     $("#btnAddNewUser").show();
            // }

            if (!token) {
                $("#usersLoadingMessage").hide();
                $("#usersErrorMessage").text("Kullanıcı listesini görmek için lütfen giriş yapın.").show();
                // Opsiyonel: Login'e yönlendir
                // window.location.href = "/Login";
                return; // Token yoksa devam etme
            }

            LoadUserList(currentUserRoles); // Kullanıcı listesini yükle, rolleri parametre olarak gönder

            function LoadUserList(roles) { // 'roles' parametresi artık buradan geliyor
                $("#usersLoadingMessage").show();
                $("#usersErrorMessage").hide();

                $.ajax({
                    url: `${apiBaseUrl}/User/List`, // API endpoint'iniz
                    type: "GET",
                    headers: { "Authorization": "Bearer " + token },
                    success: function (usersArray) {
                        $("#usersLoadingMessage").hide();
                        var $usersTableBody = $("#tbUserList tbody");
                        $usersTableBody.empty();

                        if (usersArray && Array.isArray(usersArray) && usersArray.length > 0) {
                            $.each(usersArray, function (index, user) {
                                var fullName = `${user.firstName || ''} ${user.lastName || ''}`.trim();
                                if (!fullName && user.fullName) fullName = user.fullName;
                                if (!fullName) fullName = 'N/A';

                                var actionButtonsHtml = "";
                                // Admin rolüne sahipse düzenleme ve silme butonlarını ekle
                                if (roles && roles.includes("Admin")) {
                                    actionButtonsHtml = `
                                        <button class="btn btn-sm btn-warning mr-1 btnEditUser" data-id="${user.id}" title="Kullanıcıyı Düzenle" data-bs-toggle="modal" data-bs-target="#editUserModal"><i class="fa fa-edit"></i></button>
                                        <button class="btn btn-sm btn-danger btnDeleteUser" data-id="${user.id}" title="Kullanıcıyı Sil"><i class="fa fa-trash"></i></button>
                                    `;
                                }

                                var row = `<tr>
                                    <td>${user.id || 'N/A'}</td>
                                    <td>${user.userName || 'N/A'}</td>
                                    <td>${user.email || 'N/A'}</td>
                                    <td>${fullName}</td>
                                    <td>${actionButtonsHtml}</td>
                                </tr>`;
                                $usersTableBody.append(row);
                            });
                        } else {
                            $usersTableBody.append('<tr><td colspan="5" class="text-center">Gösterilecek kullanıcı bulunamadı.</td></tr>');
                        }
                    },
                    error: function (jqXHR, textStatus, errorThrown) {
                        $("#usersLoadingMessage").hide();
                        console.error("Kullanıcı listesi alınırken hata:", jqXHR.status, jqXHR.responseText, textStatus, errorThrown);
                        var errorMessage = "Kullanıcı listesi alınırken bir sorun oluştu.";
                        if (jqXHR.status === 401 || jqXHR.status === 403) {
                            errorMessage = "Kullanıcı listesini görme yetkiniz bulunmamaktadır.";
                        } else if (jqXHR.responseJSON && jqXHR.responseJSON.message) {
                            errorMessage = jqXHR.responseJSON.message;
                        }
                        $("#usersErrorMessage").text(errorMessage).show();
                    }
                });
            }

            // ----- KULLANICI DÜZENLEME MODALI İŞLEMLERİ -----
            var editingUserId = null;

            $(document).on("click", ".btnEditUser", function() {
                editingUserId = $(this).data("id");
                $("#editUserAlert").hide().removeClass("alert-success alert-danger alert-warning").text("");
                // Formu temizle (önceki verilerden kalmasın)
                $("#editUserForm")[0].reset();

                if (!editingUserId) {
                    alert("Düzenlenecek kullanıcı ID'si alınamadı.");
                    return;
                }
                console.log("Düzenlenecek Kullanıcı ID:", editingUserId);

                // API'den kullanıcı bilgilerini çek
                $.ajax({
                    url: `${apiBaseUrl}/User/GetById?id=${editingUserId}`, // API UserController'daki GetById metodu
                    type: "GET",
                    headers: { "Authorization": "Bearer " + token },
                    success: function(userDto) {
                        if (userDto) {
                            $("#editUserId").val(userDto.id);
                            $("#editUserName").val(userDto.userName);
                            $("#editEmail").val(userDto.email);
                            $("#editFirstName").val(userDto.firstName || '');
                            $("#editLastName").val(userDto.lastName || '');
                            $("#editPhoneNumber").val(userDto.phoneNumber || '');
                            // Modal zaten data-bs-toggle ile açılıyor olmalı.
                            // Eğer açılmazsa: $('#editUserModal').modal('show'); (Bootstrap 4 için)
                             var myModal = new bootstrap.Modal(document.getElementById('editUserModal')); 
                             myModal.show(); 
                        } else {
                            alert("Kullanıcı bilgileri alınamadı (API null döndü).");
                        }
                    },
                    error: function(jqXHR) {
                        console.error("Kullanıcı bilgileri çekilirken hata:", jqXHR.status, jqXHR.responseText);
                        alert(`Kullanıcı bilgileri çekilirken bir hata oluştu. Durum: ${jqXHR.status}`);
                    }
                });
            });

            $("#btnSaveChangesUser").on("click", function() {
                var currentEditingUserId = $("#editUserId").val(); // Modal içindeki hidden field'dan ID'yi al
                if (!currentEditingUserId) {
                    $("#editUserAlert").removeClass("alert-success").addClass("alert-danger").text("Düzenlenecek kullanıcı ID'si bulunamadı.").show();
                    return;
                }

                var updatedUserData = {
                    userName: $("#editUserName").val().trim(),
                    email: $("#editEmail").val().trim(),
                    firstName: $("#editFirstName").val().trim(),
                    lastName: $("#editLastName").val().trim(),
                    phoneNumber: $("#editPhoneNumber").val().trim()
                };

                if (!updatedUserData.userName || !updatedUserData.email) {
                    $("#editUserAlert").removeClass("alert-success").addClass("alert-danger").text("Kullanıcı adı ve email boş bırakılamaz.").show();
                    return;
                }
                $("#editUserAlert").hide();
                $(this).prop("disabled", true).text("Kaydediliyor...");

                    $.ajax({
        url: `${apiBaseUrl}/User/UpdateUser/${currentEditingUserId}`, // <<< DEĞİŞİKLİK BURADA! "UpdateUser" eklendi.
        type: "PUT",
        contentType: "application/json",
        data: JSON.stringify(updatedUserData),
        headers: { "Authorization": "Bearer " + token },
                    success: function(response) {
                        $("#btnSaveChangesUser").prop("disabled", false).text("Değişiklikleri Kaydet");
                        if (response && response.status === true) {
                            $("#editUserAlert").removeClass("alert-danger").addClass("alert-success").text(response.message || "Kullanıcı başarıyla güncellendi! Liste yenileniyor...").show();
                            setTimeout(function() {
                                $('#editUserModal').modal('hide');
                                LoadUserList(currentUserRoles); // Kullanıcı listesini yenile (currentUserRoles zaten scope'da var)
                            }, 1500);
                        } else {
                            $("#editUserAlert").removeClass("alert-success").addClass("alert-danger").text(response.message || "Kullanıcı güncellenemedi (API status false).").show();
                        }
                    },
                    error: function(jqXHR) {
                        $("#btnSaveChangesUser").prop("disabled", false).text("Değişiklikleri Kaydet");
                        var errorMessage = "Kullanıcı güncellenirken bir API hatası oluştu.";
                         if (jqXHR.responseJSON) {
                            if (jqXHR.responseJSON.message) errorMessage = jqXHR.responseJSON.message;
                            else if (jqXHR.responseJSON.errors) {
                                var errors = [];
                                for(var key in jqXHR.responseJSON.errors) {
                                    if(jqXHR.responseJSON.errors.hasOwnProperty(key)) {
                                        errors.push(jqXHR.responseJSON.errors[key].join(' '));
                                    }
                                }
                                errorMessage = "Lütfen hataları düzeltin: " + errors.join('; ');
                            }
                            else if (jqXHR.responseJSON.title && jqXHR.status === 400) {errorMessage = "Lütfen girdiğiniz bilgileri kontrol edin (" + jqXHR.responseJSON.title + ")";}
                        }  else if (jqXHR.status === 404) {
                            errorMessage = "Kullanıcı güncelleme API endpointi bulunamadı veya kullanıcı ID'si geçersiz.";
                        } else if (jqXHR.status === 403) {
                            errorMessage = "Bu işlemi yapmaya yetkiniz yok.";
                        }
                        $("#editUserAlert").removeClass("alert-success").addClass("alert-danger").text(errorMessage).show();
                    }
                });
            });

            // Modal kapandığında formu temizle (isteğe bağlı)
            $('#editUserModal').on('hidden.bs.modal', function () {
                $("#editUserForm")[0].reset();
                $("#editUserAlert").hide().removeClass("alert-success alert-danger").text("");
                editingUserId = null; // Düzenlenen ID'yi sıfırla
            });
        });
    </script>
}